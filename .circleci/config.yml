version: 2
common: &common
  machine:
    docker_layer_caching: false 
  working_directory: ~/cogeo-layer
  steps:
    - checkout
    - attach_workspace:
        at: ~/cogeo-layer
    
    - run: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
    
    - run:
        name: create layer 
        command: |
          docker build \
            --build-arg GDAL_VERSION=${GDAL_VERSION} \
            --tag remotepixel/amazonlinux:gdal${GDAL_VERSION}-py3.7-cogeo .
          docker run \
            --name lambda \
            -w /var/task \
            --volume $(pwd)/:/local \
            -itd remotepixel/amazonlinux:gdal${GDAL_VERSION}-py3.7-cogeo \
            bash
          docker exec -it lambda bash '/local/scripts/create-lambda-layer.sh'	
          docker cp lambda:/tmp/package.zip gdal${GDAL_VERSION}-py3.7-cogeo.zip
          docker stop lambda
          docker rm lambda        
    
    - run:
        name: test layer 
        command: |
          docker run \
              --name lambda \
              --volume $(pwd)/:/local \
              --env GDAL_DATA=/opt/share/gdal \
              --env PROJ_LIB=/opt/share/proj \
              --env PYTHONPATH=/opt/python:/var/runtime \
              -itd lambci/lambda:build-python3.7 bash
          docker cp ./gdal${GDAL_VERSION}-py3.7-cogeo.zip lambda:/tmp/layer.zip
          docker exec -it lambda bash -c 'unzip -q /tmp/layer.zip -d /opt/'
          docker exec -it lambda bash -c 'pip install pytest && py.test /local/tests/'
          docker stop lambda
          docker rm lambda
    
    - run:
        name: push image
        command: docker push remotepixel/amazonlinux:gdal${GDAL_VERSION}-py3.7-cogeo
    
    - persist_to_workspace:
        root: .
        paths:
          - gdal*-cogeo.zip

jobs:
  "gdal-3.0":
    <<: *common
    environment:
      - GDAL_VERSION=3.0

  "gdal-2.4":
    <<: *common
    environment:
      - GDAL_VERSION=2.4

  deploy:
    docker:
      - image: circleci/python:3.7.2
        environment:
          - GDAL_VERSIONS=2.4 3.0
    working_directory: ~/cogeo-layer
    steps:
      - checkout
      - attach_workspace:
          at: ~/cogeo-layer
      - run:
          name: install cmd
          command: |
            sudo apt-get install jq
            sudo pip install boto3 click
      - run:
          name: Deploy Layer
          command: |
            for GDAL_VERSION in ${GDAL_VERSIONS}; do
              python scripts/deploy-layer.py ${GDAL_VERSION} 3.7 cogeo
            done

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - "gdal-3.0"
      - "gdal-2.4"    
      - deploy:
          requires:
            - "gdal-3.0"
            - "gdal-2.4" 

